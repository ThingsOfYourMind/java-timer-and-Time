/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package simpletimer;

import java.awt.Color;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;


/**
 *  Simple Timer and Time keep
 * Wanted to make something simple for practice
 * @author Aaron
 */
public class TimerWindow extends javax.swing.JFrame {
    Runnable timeUpdate = new realTimeSetter();
    Runnable TimerStart = new TimerStart();
    Thread t = new Thread(timeUpdate, "Time");
    Thread tStart = new Thread(TimerStart, "Timer");
    
    long timerStart_long;
    long new_long;
    long sysTime;
    long snapshotTimer;

    
    enum TimerState {
        RUNNING,
        PAUSED,
        SET,
        STOPPED;
    }
    private TimerState timerState = TimerState.STOPPED;
    
    /**
     * Creates new form TimerWindow
     */
    public TimerWindow() {
        initComponents();
        startThreads();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        realTime = new javax.swing.JLabel();
        timeText1 = new javax.swing.JLabel();
        startStopButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        pauseButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        FileExitItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Simple Timer");
        setResizable(false);

        jLabel1.setText("Timer:");

        realTime.setFont(new java.awt.Font("Times New Roman", 1, 48)); // NOI18N
        realTime.setText("00:00:00 PM");

        timeText1.setFont(new java.awt.Font("Times New Roman", 1, 48)); // NOI18N
        timeText1.setText("00:00:00.00");
        timeText1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        timeText1.setInheritsPopupMenu(false);
        timeText1.setRequestFocusEnabled(false);

        startStopButton.setText("Start");
        startStopButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                startStopButtonMousePressed(evt);
            }
        });

        resetButton.setText("Reset");
        resetButton.setEnabled(false);
        resetButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                resetButtonMousePressed(evt);
            }
        });

        jLabel2.setText("Time:");

        pauseButton.setText("Pause");
        pauseButton.setEnabled(false);
        pauseButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                pauseButtonMousePressed(evt);
            }
        });

        jMenu1.setText("File");

        FileExitItem.setText("Exit");
        FileExitItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FileExitItemActionPerformed(evt);
            }
        });
        jMenu1.add(FileExitItem);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(startStopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pauseButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(resetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1)
                    .addComponent(timeText1, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(realTime)
                    .addComponent(jLabel2))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(timeText1)
                    .addComponent(realTime))
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startStopButton)
                    .addComponent(resetButton)
                    .addComponent(pauseButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startStopButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_startStopButtonMousePressed

        switch(timerState){
            case STOPPED:
                startStopButton.setText("Stop");
                timerState = TimerState.RUNNING;
                
                resetButton.setEnabled(true);
                pauseButton.setEnabled(true);
                break;

            case RUNNING:
                startStopButton.setText("Start");
                timerState = TimerState.STOPPED;
                
                pauseButton.setEnabled(false);
                break;
                
            case PAUSED:

                break;
            default:
                System.out.println("Something went wrong");
        }

        timerStart_long = System.currentTimeMillis();
        

    }//GEN-LAST:event_startStopButtonMousePressed

    private void resetButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resetButtonMousePressed
        timerState = TimerState.STOPPED;
        resetButton.setEnabled(false);
        pauseButton.setEnabled(false);
        startStopButton.setText("Start");
        timeText1.setText("00:00:00.00");
        pauseButton.setBackground(null);
    }//GEN-LAST:event_resetButtonMousePressed

    private void pauseButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pauseButtonMousePressed
        switch(timerState){
            case RUNNING:
                timerState = TimerState.PAUSED;
                snapshotTimer = new_long;
                pauseButton.setText("Resume");
                pauseButton.setBackground(Color.WHITE);
                break;
            case PAUSED:
                timerState = TimerState.RUNNING;
                pauseButton.setText("Pause");
                pauseButton.setBackground(null);
                break;
        }
        // TODO Change this function to keep running the timer
        // and put status of timer in label above Timer display
    }//GEN-LAST:event_pauseButtonMousePressed

    private void FileExitItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FileExitItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_FileExitItemActionPerformed
    
    private void startThreads() {
        if (!t.isAlive()){
            t.start();
        }
        if (!tStart.isAlive()){
            tStart.start();
        }
    }
    
    private class realTimeSetter implements Runnable{
        /*
        * This is a runnable thread that
        * updates the Time feature of 
        * this app. I have included seconds too.
        */
        @Override
        public void run() {
            while (true){
                Calendar cal = Calendar.getInstance();
                int sec = cal.get(Calendar.SECOND);
                //String time = String.format("%02d:%02d:%02d ", t_hour, t_min, t_sec, (t_msec/10));
                String timeNow = String.format("%tl:%<tM:%02d %tp", cal, sec, cal);
                realTime.setText(timeNow.toUpperCase());
            try {
                Thread.sleep(1);
                } catch (InterruptedException ex) {
                Logger.getLogger(TimerWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

    private class TimerStart implements Runnable{
        
        @Override
        public void run() {

            while(true){
                sysTime = System.currentTimeMillis();
                
                switch(timerState){
                    case RUNNING:
                        new_long = sysTime - timerStart_long;
                        timeText1.setText(convertTime(new_long));
                        break;
                    case PAUSED:
                        new_long = sysTime - timerStart_long;
                        //long difference = sysTime - timerStart_long - snapshotTimer;
                        //timerStart_long += difference;
                        timerStart_long += (sysTime - timerStart_long - snapshotTimer);
                        
                        break;
                    case STOPPED:
                        break;
                    default: 
                        System.out.println("Something went wrong");
                        break;
                }
                try {
                    Thread.sleep(30);
                } catch (InterruptedException ex) {
                    Logger.getLogger(TimerWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        
        private String convertTime(long ms){
            long time = ms;
            
            int time_ms = (int) (time % 1000)/10;
            int time_sec = (int) (time / 1000) %60;
            int time_min = (int) ((time / 1000) / 60) % 60;
            int time_hours = (int) ((time / 1000) / 3600) % 24;
            
            return String.format("%02d:%02d:%02d.%02d" , time_hours, time_min, time_sec, time_ms);
        }
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem FileExitItem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JButton pauseButton;
    private javax.swing.JLabel realTime;
    private javax.swing.JButton resetButton;
    private javax.swing.JButton startStopButton;
    private javax.swing.JLabel timeText1;
    // End of variables declaration//GEN-END:variables
}
